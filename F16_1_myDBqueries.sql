
------ QUERIES FOR BLAZE EVENT MANAGEMENT------


------1. Owner can get a monthly sales report of each branch, keeping track of earnings and expenditures (expenses, staff salaries etc.) to evaluate profit/loss obtained.----


SELECT COUNT(*) AS NO_OF_EVENTS_PLANNED 
FROM F16_1_EVENTS E
WHERE BRANCH_ID IN (SELECT BRANCH_ID FROM F16_1_BRANCHES B WHERE B.BRANCH_NAME='DALLAS')
AND TO_CHAR(E.SCHEDULED_DATETIME, 'MON-YYYY') = 'DEC-2016';


SELECT SUM(REVENUE) AS TOTAL_REVENUE FROM (SELECT EVENT_ID,EVENT_NAME,REVENUE FROM (SELECT EVENT_ID,NAME AS EVENT_NAME,BRANCH_ID ,(B.AMT_CHARGED - A.SALARY_PAID) AS REVENUE
FROM ( SELECT SEA.EVENT_ID AS EVENT_ID, SUM(E.SALARY_PER_HOUR * SEA.SERVICE_DURATION) AS SALARY_PAID
      FROM F16_1_EMPLOYEES E 
      NATURAL JOIN F16_1_SERVICE_EVENT_ASS SEA 
      GROUP BY SEA.EVENT_ID) A
   NATURAL JOIN
   (SELECT SEA.EVENT_ID AS EVENT_ID, SUM((S.SERVICE_CHARGE * SEA.SERVICE_DURATION) - S.EQUIPMENT_CHARGE) AS AMT_CHARGED
      FROM F16_1_SERVICES S
      NATURAL JOIN F16_1_SERVICE_EVENT_ASS SEA 
      GROUP BY SEA.EVENT_ID) B
   NATURAL JOIN F16_1_EVENTS E WHERE TO_CHAR(E.SCHEDULED_DATETIME,'MON-YYYY')='DEC-2016')
NATURAL JOIN F16_1_BRANCHES WHERE BRANCH_NAME LIKE '%DALLAS%');


SELECT EVENT_ID,EVENT_NAME,REVENUE AS REVENUE_PER_EVENT FROM (SELECT EVENT_ID,NAME AS EVENT_NAME,BRANCH_ID ,(B.AMT_CHARGED - A.SALARY_PAID) AS REVENUE
FROM ( SELECT SEA.EVENT_ID AS EVENT_ID, SUM(E.SALARY_PER_HOUR * SEA.SERVICE_DURATION) AS SALARY_PAID
      FROM F16_1_EMPLOYEES E 
      NATURAL JOIN F16_1_SERVICE_EVENT_ASS SEA 
      GROUP BY SEA.EVENT_ID) A
   NATURAL JOIN
   (SELECT SEA.EVENT_ID AS EVENT_ID, SUM((S.SERVICE_CHARGE * SEA.SERVICE_DURATION) - S.EQUIPMENT_CHARGE) AS AMT_CHARGED
      FROM F16_1_SERVICES S
      NATURAL JOIN F16_1_SERVICE_EVENT_ASS SEA 
      GROUP BY SEA.EVENT_ID) B
   NATURAL JOIN F16_1_EVENTS E WHERE TO_CHAR(E.SCHEDULED_DATETIME,'MON-YYYY')='DEC-2016')
NATURAL JOIN F16_1_BRANCHES WHERE BRANCH_NAME LIKE '%DALLAS%';


SELECT (RENT+Licence_Cost+Insurance_Cost+Maintenance_Cost+Advertisement_Cost+Miscellaneous_Cost) AS TOTAL_OPERATION_COST
FROM F16_1_OPERATIONS_COST O
WHERE O.MONTH='DEC'
AND O.YEAR=2016
AND O.BRANCH_ID IN ( SELECT BRANCH_ID FROM F16_1_BRANCHES  WHERE BRANCH_NAME like '%DALLAS%');

COMMIT;







-- 2. fetch an annual report on various events planned by the company and identify the type of event being planned the most

SELECT TE.TYPE_NAME AS TYPE_OF_EVENT, A.EVENT_COUNT AS EVENT_COUNT, B.TOTAL_EVENTS,((A.EVENT_COUNT/B.TOTAL_EVENTS) * 100 ) AS PERCENTAGE 
FROM ( SELECT E.TYPE_ID AS TYPE_ID, COUNT(E.TYPE_ID) AS EVENT_COUNT 
   FROM F16_1_EVENTS E WHERE TO_CHAR(E.SCHEDULED_DATETIME,'YYYY')>'2016' GROUP BY E.TYPE_ID ORDER BY EVENT_COUNT DESC) A 
NATURAL JOIN F16_1_TYPE_OF_EVENTS TE
NATURAL JOIN (SELECT COUNT(*) AS TOTAL_EVENTS FROM F16_1_EVENTS EV WHERE TO_CHAR(EV.SCHEDULED_DATETIME,'YYYY')>'2016' ) B;

COMMIT;






-- 3. scope for planning small scaled and large scale events in a particular branch, based on the number of people attending the event

SELECT NO_OF_LARGE_EVENTS FROM (SELECT COUNT(*) AS NO_OF_LARGE_EVENTS FROM F16_1_EVENTS E NATURAL JOIN F16_1_BRANCHES B WHERE E.NO_OF_GUESTS>100 AND B.BRANCH_NAME LIKE '%DALLAS%');

SELECT NO_OF_SMALL_EVENTS FROM (SELECT COUNT(*) AS NO_OF_SMALL_EVENTS FROM F16_1_EVENTS E NATURAL JOIN F16_1_BRANCHES B WHERE E.NO_OF_GUESTS<100 AND B.BRANCH_NAME LIKE '%DALLAS%');

COMMIT;







-- 4. An Owner can identify the type of event that generates the most revenue

SELECT REVENUE,TYPE_NAME FROM (SELECT SUM(TOTAL) AS REVENUE,TYPE_ID FROM (SELECT B.AMT_CHARGED-A.SALARY_PAID AS TOTAL,TYPE_ID,TYPE_NAME
FROM
( SELECT SEA.EVENT_ID AS F16_1_EVENT_ID, SUM(E.SALARY_PER_HOUR * SEA.SERVICE_DURATION) AS SALARY_PAID
   FROM F16_1_EMPLOYEES E
   NATURAL JOIN F16_1_SERVICE_EVENT_ASS SEA 
   GROUP BY SEA.EVENT_ID
) A 
NATURAL JOIN
(SELECT SEA.EVENT_ID AS EVENT_ID, SUM((S.SERVICE_CHARGE * SEA.SERVICE_DURATION)-S.EQUIPMENT_CHARGE)  AS AMT_CHARGED
FROM F16_1_SERVICES S
NATURAL JOIN F16_1_SERVICE_EVENT_ASS SEA
GROUP BY SEA.EVENT_ID) B
NATURAL JOIN
F16_1_EVENTS E
NATURAL JOIN
F16_1_TYPE_OF_EVENTS TE)
GROUP BY TYPE_ID)
NATURAL JOIN
F16_1_TYPE_OF_EVENTS ORDER BY REVENUE DESC
;

COMMIT;





-- 5. Identify the most and least popular location/locations among the events hosted by the company in a particular city

SELECT * FROM (
 SELECT E.LOC_NAME AS MOSTPOPULAR, COUNT(E.LOC_NAME) AS COUNT FROM F16_1_EVENTS E NATURAL JOIN F16_1_BRANCHES B WHERE B.CITY 
 like '%DALLAS%' GROUP BY E.LOC_NAME ORDER BY COUNT desc) WHERE ROWNUM=1;

COMMIT;






-- 6(a). The most popular month for a particular event


SELECT *
FROM ( SELECT TYPE_OF_EVENT, MONTH_OF_EVENT AS POPULAR_MONTH,COUNT
      FROM (SELECT TYPE_OF_EVENT,MONTH_OF_EVENT,COUNT(*) AS COUNT
            FROM (SELECT TE.TYPE_NAME AS TYPE_OF_EVENT,TO_CHAR(E.SCHEDULED_DATETIME,'MON') AS MONTH_OF_EVENT
                  FROM F16_1_EVENTS E
                  NATURAL JOIN
                  F16_1_TYPE_OF_EVENTS TE)
            GROUP BY TYPE_OF_EVENT,MONTH_OF_EVENT) A
      NATURAL JOIN F16_1_BRANCHES B
      WHERE A.TYPE_OF_EVENT='ANNIVERSARY' AND B.BRANCH_NAME='NYC'
      ORDER BY COUNT DESC)
WHERE ROWNUM=1;
COMMIT;






-- 6(b). The day of the week which is most preferred by the clients to host events

SELECT * FROM (SELECT BRANCH_NAME, DAY_OF_EVENT AS POPULAR_DAY FROM (SELECT BRANCH_NAME,DAY_OF_EVENT,COUNT(*) AS COUNT
            FROM(SELECT B.BRANCH_NAME AS BRANCH_NAME,TO_DATE(E.SCHEDULED_DATETIME,'DD-MON-YYYY')AS DATE_OF_EVENT,TO_CHAR(E.SCHEDULED_DATETIME,'DY') AS DAY_OF_EVENT
                  FROM F16_1_EVENTS E
                  NATURAL JOIN F16_1_BRANCHES B)
            GROUP BY BRANCH_NAME,DAY_OF_EVENT)
WHERE BRANCH_NAME='NYC'
ORDER BY COUNT DESC) ALPHA
WHERE ROWNUM=1;
COMMIT;






-- 7. Identification of the most and the least in-demand service/services offered by the company.


SELECT SERVICE_NAME AS MOST_IN_DEMAND ,COUNT FROM ( SELECT * FROM ( SELECT SEA.SERVICE_ID, COUNT(SEA.SERVICE_ID) AS COUNT FROM F16_1_SERVICE_EVENT_ASS SEA GROUP BY SEA.SERVICE_ID ORDER BY COUNT DESC) WHERE ROWNUM=1) NATURAL JOIN F16_1_SERVICES;
SELECT SERVICE_NAME AS LEAST_IN_DEMAND ,COUNT FROM ( SELECT * FROM ( SELECT SEA.SERVICE_ID, COUNT(SEA.SERVICE_ID) AS COUNT FROM F16_1_SERVICE_EVENT_ASS SEA GROUP BY SEA.SERVICE_ID ORDER BY COUNT ) WHERE ROWNUM=1) NATURAL JOIN F16_1_SERVICES;
COMMIT;






-- 8. view annual expense statement displaying cost bifurcation for each branch

SELECT SUM(TOTAL_ANNUAL_EXPENSE) AS TOTAL_ANNUAL_EXPENSE,YEAR FROM (SELECT (RENT+LICENCE_COST+INSURANCE_COST+MAINTENANCE_COST+ADVERTISEMENT_COST+MISCELLANEOUS_COST) AS TOTAL_ANNUAL_EXPENSE,YEAR
FROM F16_1_OPERATIONS_COST WHERE BRANCH_ID IN (SELECT BRANCH_ID FROM F16_1_BRANCHES WHERE BRANCH_NAME='SAN FRANCISCO') AND YEAR=2016) GROUP BY YEAR;

SELECT MONTH,RENT,LICENCE_COST,INSURANCE_COST,MAINTENANCE_COST,ADVERTISEMENT_COST,MISCELLANEOUS_COST, (RENT+LICENCE_COST+INSURANCE_COST+MAINTENANCE_COST+ADVERTISEMENT_COST+MISCELLANEOUS_COST) AS TOTAL_COST
FROM F16_1_OPERATIONS_COST WHERE BRANCH_ID IN (SELECT BRANCH_ID FROM F16_1_BRANCHES WHERE BRANCH_NAME='SAN FRANCISCO') AND YEAR=2016;

COMMIT;




-- 9. Utilization of the system to monitor the upcoming events, by the owner

SELECT C.NAME AS CLIENT_NAME,E.NAME AS EVENT_NAME, E.LOC_NAME AS LOCATION, E.LOC_CITY AS CITY, E.SCHEDULED_DATETIME AS EVENT_DATE 
FROM F16_1_EVENTS E , F16_1_CLIENTS C 
WHERE E.CLIENT_ID=C.CLIENT_ID AND E.SCHEDULED_DATETIME > SYSDATE;

COMMIT;





--- 10.  Owner can check the outstanding dues (if any) for events in a particular branch

SELECT *
FROM (SELECT EVENT_ID,C.NAME AS CLIENT_NAME, E.NAME AS EVENT_NAME,SCHEDULED_DATETIME,SCHEDULED_DATETIME-20 AS DUE_DATE,(A.AMT_CHARGED - E.AMOUNT_PAID) AS OUTSTANDING_DUE 
      FROM (SELECT SEA.EVENT_ID AS EVENT_ID,SUM(S.SERVICE_CHARGE * SEA.SERVICE_DURATION ) AS AMT_CHARGED
            FROM F16_1_SERVICES S 
            NATURAL JOIN
            F16_1_SERVICE_EVENT_ASS SEA
            GROUP BY SEA.EVENT_ID) A 
      NATURAL JOIN
      F16_1_EVENTS E
      JOIN
      F16_1_CLIENTS C USING (CLIENT_ID,CLIENT_ID))
WHERE DUE_DATE>=SYSDATE
ORDER BY DUE_DATE;
COMMIT;




--11. Owner can check the average rating of each employee in a particular branch and use it to recognize the best employees

SELECT EMPLOYEE_ID,EMPLOYEE_NAME,BRANCH_NAME,AVG_RATING FROM
(SELECT E.NAME AS EMPLOYEE_NAME,EMPLOYEE_ID,BEA.BRANCH_ID ,A.AVERAGERATING AS AVG_RATING 
FROM( 
   SELECT SEA.EMPLOYEE_ID AS EMPLOYEE_ID, AVG(SEA.SERVICE_RATING) AS AVERAGERATING 
   FROM F16_1_SERVICE_EVENT_ASS SEA 
   GROUP BY SEA.EMPLOYEE_ID
   ORDER BY AVERAGERATING DESC) A
NATURAL JOIN F16_1_EMPLOYEES E
NATURAL JOIN F16_1_BRANCH_EMPLOYEE_ASS BEA)
JOIN F16_1_BRANCHES USING(BRANCH_ID,BRANCH_ID);

COMMIT;
